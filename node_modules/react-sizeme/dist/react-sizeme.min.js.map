{"version":3,"file":"react-sizeme.min.js","sources":["../src/resizeDetector.js","../src/sizeMe.js"],"sourcesContent":["import createResizeDetector from 'element-resize-detector'\n\nconst instances = {}\n\n// Lazily require to not cause bug\n// https://github.com/ctrlplusb/react-sizeme/issues/6\nfunction resizeDetector(strategy = 'scroll') {\n  if (!instances[strategy]) {\n    instances[strategy] = createResizeDetector({\n      strategy,\n    })\n  }\n\n  return instances[strategy]\n}\n\nexport default resizeDetector\n","/* eslint-disable react/no-multi-comp */\n/* eslint-disable react/require-default-props */\n\nimport React, { Children, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport invariant from 'invariant'\nimport throttle from 'lodash.throttle'\nimport debounce from 'lodash.debounce'\nimport resizeDetector from './resizeDetector'\n\nconst defaultConfig = {\n  monitorWidth: true,\n  monitorHeight: false,\n  monitorPosition: false,\n  refreshRate: 16,\n  refreshMode: 'throttle',\n  noPlaceholder: false,\n  resizeDetectorStrategy: 'scroll',\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component'\n}\n\n/**\n * This is a utility wrapper component that will allow our higher order\n * component to get a ref handle on our wrapped components html.\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\n */\nclass ReferenceWrapper extends Component {\n  static displayName = 'SizeMeReferenceWrapper'\n\n  render() {\n    return Children.only(this.props.children)\n  }\n}\nReferenceWrapper.propTypes = { children: PropTypes.element.isRequired }\n\nfunction Placeholder({ className, style }) {\n  // Lets create the props for the temp element.\n  const phProps = {}\n\n  // We will use any provided className/style or else make the temp\n  // container take the full available space.\n  if (!className && !style) {\n    phProps.style = { width: '100%', height: '100%' }\n  } else {\n    if (className) {\n      phProps.className = className\n    }\n    if (style) {\n      phProps.style = style\n    }\n  }\n\n  return <div {...phProps} />\n}\nPlaceholder.displayName = 'SizeMePlaceholder'\nPlaceholder.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n}\n\n/**\n * As we need to maintain a ref on the root node that is rendered within our\n * SizeMe component we need to wrap our entire render in a sub component.\n * Without this, we lose the DOM ref after the placeholder is removed from\n * the render and the actual component is rendered.\n * It took me forever to figure this out, so tread extra careful on this one!\n */\nconst renderWrapper = WrappedComponent => {\n  function SizeMeRenderer(props) {\n    const {\n      explicitRef,\n      className,\n      style,\n      size,\n      disablePlaceholder,\n      onSize,\n      ...restProps\n    } = props\n\n    const noSizeData =\n      size == null ||\n      (size.width == null && size.height == null && size.position == null)\n\n    const renderPlaceholder = noSizeData && !disablePlaceholder\n\n    const renderProps = {\n      className,\n      style,\n    }\n\n    if (size != null) {\n      renderProps.size = size\n    }\n\n    const toRender = renderPlaceholder ? (\n      <Placeholder className={className} style={style} />\n    ) : (\n      <WrappedComponent {...renderProps} {...restProps} />\n    )\n\n    return <ReferenceWrapper ref={explicitRef}>{toRender}</ReferenceWrapper>\n  }\n\n  SizeMeRenderer.displayName = `SizeMeRenderer(${getDisplayName(\n    WrappedComponent,\n  )})`\n\n  SizeMeRenderer.propTypes = {\n    explicitRef: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    style: PropTypes.object, // eslint-disable-line react/forbid-prop-types\n    size: PropTypes.shape({\n      width: PropTypes.number, // eslint-disable-line react/no-unused-prop-types\n      height: PropTypes.number, // eslint-disable-line react/no-unused-prop-types\n    }),\n    disablePlaceholder: PropTypes.bool,\n    onSize: PropTypes.func,\n  }\n\n  return SizeMeRenderer\n}\n\n/**\n * :: config -> Component -> WrappedComponent\n *\n * Higher order component that allows the wrapped component to become aware\n * of it's size, by receiving it as an object within it's props.\n *\n * @param  monitorWidth\n *   Default true, whether changes in the element's width should be monitored,\n *   causing a size property to be broadcast.\n * @param  monitorHeight\n *   Default false, whether changes in the element's height should be monitored,\n *   causing a size property to be broadcast.\n *\n * @return The wrapped component.\n */\nfunction sizeMe(config = defaultConfig) {\n  const {\n    monitorWidth = defaultConfig.monitorWidth,\n    monitorHeight = defaultConfig.monitorHeight,\n    monitorPosition = defaultConfig.monitorPosition,\n    refreshRate = defaultConfig.refreshRate,\n    refreshMode = defaultConfig.refreshMode,\n    noPlaceholder = defaultConfig.noPlaceholder,\n    resizeDetectorStrategy = defaultConfig.resizeDetectorStrategy,\n  } = config\n\n  invariant(\n    monitorWidth || monitorHeight || monitorPosition,\n    'You have to monitor at least one of the width, height, or position when using \"sizeMe\"',\n  )\n\n  invariant(\n    refreshRate >= 16,\n    \"It is highly recommended that you don't put your refreshRate lower than \" +\n      '16 as this may cause layout thrashing.',\n  )\n\n  invariant(\n    refreshMode === 'throttle' || refreshMode === 'debounce',\n    'The refreshMode should have a value of \"throttle\" or \"debounce\"',\n  )\n\n  const refreshDelayStrategy = refreshMode === 'throttle' ? throttle : debounce\n\n  const detector = resizeDetector(resizeDetectorStrategy)\n\n  return function WrapComponent(WrappedComponent) {\n    const SizeMeRenderWrapper = renderWrapper(WrappedComponent)\n\n    class SizeAwareComponent extends React.Component {\n      static displayName = `SizeMe(${getDisplayName(WrappedComponent)})`\n\n      static propTypes = {\n        onSize: PropTypes.func,\n      }\n\n      state = {\n        width: undefined,\n        height: undefined,\n        position: undefined,\n      }\n\n      componentDidMount() {\n        this.determineStrategy(this.props)\n        this.handleDOMNode()\n      }\n\n      componentWillReceiveProps(nextProps) {\n        this.determineStrategy(nextProps)\n      }\n\n      componentDidUpdate() {\n        this.handleDOMNode()\n      }\n\n      componentWillUnmount() {\n        // Change our size checker to a noop just in case we have some\n        // late running events.\n        this.hasSizeChanged = () => undefined\n        this.checkIfSizeChanged = () => undefined\n\n        if (this.domEl) {\n          detector.uninstall(this.domEl)\n          this.domEl = null\n        }\n      }\n\n      determineStrategy = props => {\n        if (props.onSize) {\n          if (!this.callbackState) {\n            this.callbackState = {\n              ...this.state,\n            }\n          }\n          this.strategy = 'callback'\n        } else {\n          this.strategy = 'render'\n        }\n      }\n\n      strategisedSetState = state => {\n        if (this.strategy === 'callback') {\n          this.callbackState = state\n          this.props.onSize(state)\n        } else {\n          this.setState(state)\n        }\n      }\n\n      strategisedGetState = () =>\n        this.strategy === 'callback' ? this.callbackState : this.state\n\n      handleDOMNode() {\n        const found =\n          this.element &&\n          // One day this will be deprecated then I will be forced into wrapping\n          // the component with a div or such in order to get a dome element handle.\n          ReactDOM.findDOMNode(this.element) // eslint-disable-line react/no-find-dom-node\n\n        if (!found) {\n          // This is for special cases where the element may be null.\n          if (this.domEl) {\n            detector.uninstall(this.domEl)\n            this.domEl = null\n          }\n          return\n        }\n\n        if (this.domEl) {\n          detector.uninstall(this.domEl)\n        }\n\n        this.domEl = found\n        detector.listenTo(this.domEl, this.checkIfSizeChanged)\n      }\n\n      refCallback = element => {\n        this.element = element\n      }\n\n      hasSizeChanged = (current, next) => {\n        const c = current\n        const n = next\n        const cp = c.position || {}\n        const np = n.position || {}\n\n        return (\n          (monitorHeight && c.height !== n.height) ||\n          (monitorPosition &&\n            (cp.top !== np.top ||\n              cp.left !== np.left ||\n              cp.bottom !== np.bottom ||\n              cp.right !== np.right)) ||\n          (monitorWidth && c.width !== n.width)\n        )\n      }\n\n      checkIfSizeChanged = refreshDelayStrategy(el => {\n        const {\n          width,\n          height,\n          right,\n          left,\n          top,\n          bottom,\n        } = el.getBoundingClientRect()\n\n        const next = {\n          width: monitorWidth ? width : null,\n          height: monitorHeight ? height : null,\n          position: monitorPosition ? { right, left, top, bottom } : null,\n        }\n\n        if (this.hasSizeChanged(this.strategisedGetState(), next)) {\n          this.strategisedSetState(next)\n        }\n      }, refreshRate)\n\n      render() {\n        const disablePlaceholder =\n          sizeMe.enableSSRBehaviour ||\n          sizeMe.noPlaceholders ||\n          noPlaceholder ||\n          this.strategy === 'callback'\n\n        const size = { ...this.state }\n\n        return (\n          <SizeMeRenderWrapper\n            explicitRef={this.refCallback}\n            size={this.strategy === 'callback' ? null : size}\n            disablePlaceholder={disablePlaceholder}\n            {...this.props}\n          />\n        )\n      }\n    }\n\n    SizeAwareComponent.WrappedComponent = WrappedComponent\n\n    return SizeAwareComponent\n  }\n}\n\n/**\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\n * flag that should be set within the initialisation phase of your application.\n *\n * Warning: don't set this flag unless you need to as using it may cause\n * extra render cycles to happen within your components depending on the logic\n * contained within them around the usage of the `size` data.\n *\n * DEPRECATED: Please use the global disablePlaceholders\n */\nsizeMe.enableSSRBehaviour = false\n\n/**\n * Global configuration allowing to disable placeholder rendering for all\n * sizeMe components.\n */\nsizeMe.noPlaceholders = false\n\nexport default sizeMe\n"],"names":["instances","resizeDetector","strategy","createResizeDetector","defaultConfig","getDisplayName","WrappedComponent","displayName","name","ReferenceWrapper","Children","only","this","props","children","Component","Placeholder","className","style","phProps","width","height","React","propTypes","PropTypes","element","isRequired","string","object","renderWrapper","SizeMeRenderer","explicitRef","size","disablePlaceholder","restProps","onSize","renderPlaceholder","position","renderProps","toRender","ref","func","shape","number","bool","sizeMe","config","monitorWidth","monitorHeight","monitorPosition","refreshRate","refreshMode","noPlaceholder","resizeDetectorStrategy","refreshDelayStrategy","throttle","debounce","detector","SizeMeRenderWrapper","SizeAwareComponent","state","undefined","determineStrategy","_this2","callbackState","strategisedSetState","setState","strategisedGetState","refCallback","hasSizeChanged","current","next","c","n","cp","np","top","left","bottom","right","checkIfSizeChanged","el","getBoundingClientRect","handleDOMNode","nextProps","domEl","uninstall","found","findDOMNode","listenTo","enableSSRBehaviour","noPlaceholders"],"mappings":"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"}